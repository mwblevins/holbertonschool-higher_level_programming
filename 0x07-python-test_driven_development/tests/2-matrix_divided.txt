>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


    Testing Objects:

    >>> matrix2 = [[2,4],[6,8]]
    >>> matrix2_floats = [[2.2, 4.4], [6.6, 8.8]]
    >>> matrixF = [[1, 2, 3], ['a', 'b', 'c']]
    >>> matrixF2 =[[1, 2], [3, 4, 5], [1, 2]]

    Begin Testing:

    >>> matrix_divided(matrix2, 2)
    [[1.0, 2.0], [3.0, 4.0]]

    >>> matrix_divided(matrix2_floats, 2)
    [[1.1, 2.2], [3.3, 4.4]]

    >>> matrix_divided(matrix2_floats, 1)
    [[2.2, 4.4], [6.6, 8.8]]
    
    >>> matrix_divided(matrix2_floats, 1.0)
    [[2.2, 4.4], [6.6, 8.8]]

    >>> matrix_divided(matrix2, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    >>> matrix_divided(matrixF, 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(matrix2_floats, 'A')
    Traceback (most recent call last):
    ...
    TypeError: div must be a number
    
    >>> matrix_divided(matrix2, 0.00)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    >>> matrix_divided(matrixF, 1.0)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(matrixF2, 1)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided(matrix2, -1)
    [[-2.0, -4.0], [-6.0, -8.0]]

    >>> matrix_divided(matrix2_floats, 2+3j)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided(matrix2_floats, None)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided("this is a string", 5)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >> matrix_divided(None, 5)
    []

    >>> matrix_divided([[2]],3)
    [[0.67]]